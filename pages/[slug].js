import Head from "next/head";
import { createClient } from "contentful";
import { useState, useRef, useEffect } from "react";
import { getRandomInt } from "../utils/utils";

//pages
import PageArtists from "../components/pages/page-artists";
import PageAbout from "../components/pages/page-about";
import PageTeam from "../components/pages/page-team";
import PageMailing from "../components/pages/page-mailing";

const words = ["record", "gives a fuck", "knows", "works"];

//player
import PlayerCD from "../components/player/playerCD";
import Player from "../components/player/player";

export default function Index({ artists, tracks, team }) {
  console.log("artits", artists);
  //page title
  const [currentTitle, setCurrentTitle] = useState("");

  //Audio player
  const audioRef = useRef(null);
  const [trackIndex, setTrackIndex] = useState(0);
  const [isPlaying, setIsPlaying] = useState(false);

  //Audio player controls
  const audioControls = {
    play: function () {
      audioRef.current.play();
      setIsPlaying(true);
    },
    pause: () => {
      audioRef.current.pause();
      setIsPlaying(false);
    },
    playPause: () => {
      if (!isPlaying) {
        audioControls.play();
      } else {
        audioControls.pause();
      }
    },
    toNextTrack: () => {
      if (trackIndex < tracks.length - 1) {
        setTrackIndex(trackIndex + 1);
      } else {
        setTrackIndex(0);
      }
    },
    toPrevTrack: () => {
      if (trackIndex - 1 < 0) {
        setTrackIndex(tracks.length - 1);
      } else {
        setTrackIndex(trackIndex - 1);
      }
    },
    toIdTrack: (id) => {
      if (tracks[trackIndex].id !== id) {
        setTrackIndex(tracks.findIndex((track) => track.id === id));
      } else {
        audioControls.playPause();
      }
    },
  };

  useEffect(() => {
    setCurrentTitle(words[getRandomInt(words.length)]);
  }, []);

  return (
    <div>
      <Head>
        <title>{`Know 1 ${currentTitle}`}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="main-top">
        <PlayerCD trackCover={tracks[trackIndex].cover} isPlaying={isPlaying} />
        <div className="pages">
          <PageArtists
            artists={artists}
            tracks={tracks}
            isPlaying={isPlaying}
            toIdTrack={audioControls.toIdTrack}
            trackIndex={trackIndex}
          />
          <PageAbout />
          <PageTeam team={team} />
          <PageMailing />
        </div>
      </div>
      <div className="main-bottom">
        <Player
          tracks={tracks}
          trackIndex={trackIndex}
          isPlaying={isPlaying}
          setTrackIndex={setTrackIndex}
          audioControls={audioControls}
          audioRef={audioRef}
        />
      </div>
    </div>
  );
}

export async function getStaticPaths() {
  const paths = [
    {
      params: {
        slug: "home",
      },
    },
    {
      params: {
        slug: "artists",
      },
    },
    {
      params: {
        slug: "about",
      },
    },
    {
      params: {
        slug: "team",
      },
    },
    {
      params: {
        slug: "mailing",
      },
    },
  ];
  return { paths, fallback: false };
}

export async function getStaticProps({ params }) {
  const client = createClient({
    space: process.env.CONTENTFUL_SPACE_ID,
    accessToken: process.env.CONTENTFUL_ACCESS_TOKEN,
  });
  const res = await client.getEntries({
    content_type: ["page", "tracks", "artists", "team"],
  });
  //ARTISTS
  const artistsRaw = res.items.filter(
    (item) => item.sys.contentType.sys.id == "artists"
  );
  const artists = artistsRaw.map((artist) => {
    return {
      id: artist.sys.id,
      name: artist.fields.name,
      description: artist.fields.description,
      image: {
        url: artist.fields.thumbnail.fields.file.url,
        title: artist.fields.thumbnail.fields.title || artist.fields.name,
        alt: artist.fields.thumbnail.fields.description || "",
      },
      links: [{ title: "Bandcamp", url: "#" }],
    };
  });
  //TRACKS
  const tracksRaw = res.items.filter(
    (item) => item.sys.contentType.sys.id == "tracks"
  );
  const tracks = tracksRaw.map((track) => {
    return {
      id: track.sys.id,
      artistId: track.fields.artist.sys.id,
      title: track.fields.title,
      artist: track.fields.artist.fields.name,
      audioSrc: track.fields.audio.fields.file.url,
      image: track.fields.cover,
      cover: {
        url: track.fields.cover.fields.file.url,
        title: track.fields.cover.fields.title || track.fields.title,
        alt: track.fields.cover.fields.description || "",
      },
      description: track.fields.description,
      lyrics: track.fields.lyrics,
      links: [{ title: "Bandcamp", url: "#" }],
    };
  });
  //TEAM
  const teamRaw = res.items.filter(
    (item) => item.sys.contentType.sys.id == "team"
  );
  const team = teamRaw.map((member) => {
    return {
      name: member.fields.name,
      description: member.fields.description,
      image: {
        url: member.fields.thumbnail.fields.file.url,
        title: member.fields.thumbnail.fields.title || member.fields.name,
        alt: member.fields.thumbnail.fields.description || "",
      },
    };
  });

  return {
    props: {
      artists: artists,
      tracks: tracks,
      team: team,
    },
  };
}
